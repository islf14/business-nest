// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int           @id @default(autoincrement())
  name      String
  email     String        @unique
  password  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  companies Company[]
  roles     AUserHasRole[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  menu        Boolean?
  ord         Int?
  photoUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  companies   Company[]
}

model Company {
  id          Int       @id @default(autoincrement())
  name        String
  email       String?
  phone       String?
  address     String?
  website     String?
  description String?
  photoUrl    String?
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt  
}

model ARole {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  users       AUserHasRole[]
  permissions ARoleHasPermission[]
}

model APermission {
  id        Int                 @id @default(autoincrement())
  name      String              @unique
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  roles     ARoleHasPermission[]
}

model AUserHasRole {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  role    ARole  @relation(fields: [roleId], references: [id])
  roleId  Int

  @@id([userId, roleId])
}

model ARoleHasPermission {
  role          ARole        @relation(fields: [roleId], references: [id])
  roleId        Int
  permission    APermission  @relation(fields: [permissionId], references: [id])
  permissionId  Int

  @@id([roleId, permissionId])
}

enum Role {
  USER
  ADMIN
}